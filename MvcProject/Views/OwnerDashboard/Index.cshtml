@model MvcProject.Models.OwnerDashboardViewModel

@{
    ViewData["Title"] = "Owner Dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container mt-5">
    <h1 class="mb-4">Owner Dashboard - @Model.StoreName</h1>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="success-message mb-3">@TempData["SuccessMessage"]</div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="error-message mb-3">@TempData["ErrorMessage"]</div>
    }

    <!-- Menu Categories Section -->
    <div class="section">
        <h2>Menu Categories</h2>
        <a asp-action="CreateCategory" asp-route-storeId="@Model.StoreId" class="btn btn-primary mb-3">Add New Category</a>
        @if (Model.Categories != null && Model.Categories.Any())
        {
            <div class="row">
                @foreach (var category in Model.Categories.Where(c => !c.IsDeleted))
                {
                    <div class="col-md-4">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">@category.Name</h5>
                                <h6>Items:</h6>
                                @if (category.MenuItems != null && category.MenuItems.Any())
                                {
                                    <ul>
                                        @foreach (var item in category.MenuItems.Where(i => !i.IsDeleted))
                                        {
                                            <li>
                                                @item.Name - $@item.Price (Points: @item.PointsRequired)
                                                <a asp-action="EditMenuItem" asp-route-id="@item.Id" class="btn btn-sm btn-warning">Edit</a>
                                                <form asp-action="DeleteMenuItem" asp-route-id="@item.Id" method="post" class="d-inline">
                                                    @Html.AntiForgeryToken()
                                                    <button type="submit" class="btn btn-sm btn-danger" onclick="return confirm('Are you sure you want to delete this item?');">Delete</button>
                                                </form>
                                            </li>
                                        }
                                    </ul>
                                }
                                else
                                {
                                    <p>No items in this category.</p>
                                }
                                <a asp-action="EditCategory" asp-route-id="@category.Id" class="btn btn-sm btn-warning">Edit Category</a>
                                <form asp-action="DeleteCategory" asp-route-id="@category.Id" method="post" class="d-inline">
                                    @Html.AntiForgeryToken()
                                    <button type="submit" class="btn btn-sm btn-danger" onclick="return confirm('Are you sure you want to delete this category?');">Delete</button>
                                </form>
                                <a asp-action="CreateMenuItem" asp-route-categoryId="@category.Id" class="btn btn-sm btn-primary">Add Item</a>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <p>No categories found.</p>
        }
    </div>

    <!-- Orders Section -->
    <div class="section">
        <h2>Orders</h2>
        @if (Model.Orders != null && Model.Orders.Any())
        {
            <table class="table table-bordered" id="ordersTable">
                <thead>
                    <tr>
                        <th>Order ID</th>
                        <th>Customer</th>
                        <th>Room</th>
                        <th>Total Amount</th>
                        <th>Payment Method</th>
                        <th>Points Used</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="ordersBody">
                    @foreach (var order in Model.Orders.Where(o => !o.IsDeleted))
                    {
                        <tr data-order-id="@order.Id">
                            <td>@order.Id</td>
                            <td>@order.Customer.PhoneNumber</td>
                            <td>@order.Room.Username</td>
                            <td>$@order.TotalAmount</td>
                            <td>@order.PaymentMethod</td>
                            <td>@order.PointsUsed</td>
                            <td>@order.Status</td>
                            <td>
                                @if (order.Status == System.Domain.Enums.OrderStatus.Pending)
                                {
                                    <form asp-action="UpdateOrderStatus" method="post" class="d-inline">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="Id" value="@order.Id" />
                                        <input type="hidden" name="Status" value="Accepted" />
                                        <button type="submit" class="btn btn-sm btn-success">Accept</button>
                                    </form>
                                    <form asp-action="UpdateOrderStatus" method="post" class="d-inline">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="Id" value="@order.Id" />
                                        <input type="hidden" name="Status" value="Rejected" />
                                        <input type="text" name="RejectionReason" placeholder="Rejection reason" class="form-control d-inline-block w-auto" />
                                        <button type="submit" class="btn btn-sm btn-danger">Reject</button>
                                    </form>
                                }
                                else
                                {
                                    <span>@order.Status</span>
                                    @if (order.Status == System.Domain.Enums.OrderStatus.Rejected && !string.IsNullOrEmpty(order.RejectionReason))
                                    {
                                        <p>Reason: @order.RejectionReason</p>
                                    }
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>No orders found.</p>
        }
    </div>

    <!-- Assistance Requests Section -->
    <div class="section">
        <h2>Assistance Requests</h2>
        @if (Model.AssistanceRequests != null && Model.AssistanceRequests.Any())
        {
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Request ID</th>
                        <th>Customer</th>
                        <th>Room</th>
                        <th>Request Type</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var request in Model.AssistanceRequests.Where(r => !r.IsDeleted))
                    {
                        <tr>
                            <td>@request.Id</td>
                            <td>@request.Customer.PhoneNumber</td>
                            <td>@request.Room.Username</td>
                            <td>@request.RequestType</td>
                            <td>@request.Status</td>
                            <td>
                                @if (request.Status == System.Domain.Enums.AssistanceRequestStatus.Pending)
                                {
                                    <form asp-action="UpdateAssistanceRequestStatus" method="post" class="d-inline">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="Id" value="@request.Id" />
                                        <input type="hidden" name="Status" value="Accepted" />
                                        <button type="submit" class="btn btn-sm btn-success">Accept</button>
                                    </form>
                                    <form asp-action="UpdateAssistanceRequestStatus" method="post" class="d-inline">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="Id" value="@request.Id" />
                                        <input type="hidden" name="Status" value="Rejected" />
                                        <input type="text" name="RejectionReason" placeholder="Rejection reason" class="form-control d-inline-block w-auto" />
                                        <button type="submit" class="btn btn-sm btn-danger">Reject</button>
                                    </form>
                                }
                                else
                                {
                                    <span>@request.Status</span>
                                    @if (request.Status == System.Domain.Enums.AssistanceRequestStatus.Rejected && !string.IsNullOrEmpty(request.RejectionReason))
                                    {
                                        <p>Reason: @request.RejectionReason</p>
                                    }
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>No assistance requests found.</p>
        }
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.9/signalr.min.js"></script>
    <script>
        // Connect to SignalR Hub
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/notificationHub")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        // Start the connection
        connection.start().then(() => {
            console.log("Connected to SignalR Hub");
            // Join the store group
            connection.invoke("JoinStoreGroup", `Store_@Model.StoreId`).catch(err => console.error(err));
        }).catch(err => {
            console.error("SignalR Connection Error: ", err);
            alert("Failed to connect to notification service. Please refresh the page.");
        });

        // Receive order notifications
        connection.on("ReceiveOrderNotification", (message) => {
            alert(message); // Show notification to the owner
            const orderId = message.match(/\d+/)[0]; // Extract order ID from message (e.g., "New order placed (ID: 123)" -> 123)

            // Fetch the new order details via AJAX
            $.ajax({
                url: `/OwnerDashboard/GetOrderDetails/${orderId}`,
                method: "GET",
                success: function (order) {
                    // Check if order already exists in the table
                    if (!document.querySelector(`tr[data-order-id="${order.id}"]`)) {
                        // Add the new order to the table
                        const newRow = `
                            <tr data-order-id="${order.id}">
                                <td>${order.id}</td>
                                <td>${order.customerPhone}</td>
                                <td>${order.roomUsername}</td>
                                <td>$${order.totalAmount}</td>
                                <td>${order.paymentMethod}</td>
                                <td>${order.pointsUsed}</td>
                                <td>${order.status}</td>
                                <td>
                                    ${order.status === "Pending" ? `
                                        <form asp-action="UpdateOrderStatus" method="post" class="d-inline">
                                            <input type="hidden" name="Id" value="${order.id}" />
                                            <input type="hidden" name="Status" value="Accepted" />
                                            <button type="submit" class="btn btn-sm btn-success">Accept</button>
                                        </form>
                                        <form asp-action="UpdateOrderStatus" method="post" class="d-inline">
                                            <input type="hidden" name="Id" value="${order.id}" />
                                            <input type="hidden" name="Status" value="Rejected" />
                                            <input type="text" name="RejectionReason" placeholder="Rejection reason" class="form-control d-inline-block w-auto" />
                                            <button type="submit" class="btn btn-sm btn-danger">Reject</button>
                                        </form>
                                    ` : `<span>${order.status}</span>`}
                                </td>
                            </tr>
                        `;
                        document.getElementById("ordersBody").insertAdjacentHTML("afterbegin", newRow);
                    }
                },
                error: function (err) {
                    console.error("Error fetching order details: ", err);
                }
            });
        });
    </script>
}